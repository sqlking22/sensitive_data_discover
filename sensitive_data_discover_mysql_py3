import re
import base64
import mysql.connector

def f_sensitive_info(db_connection, username, num_row, max_row, haterate, result_threshold, table_check, view_check):
    pat_tel = re.compile(r'((((010)|(0[2-9]\d{1,2}))[-\s]?)[1-9]\d{6,7}$)|((\+?0?86\-?)?1[3|4|5|7|8][0-9]\d{8}$)')
    pat_account = re.compile(r'(([13-79]\d{3})|(2[1-9]\d{2})|(20[3-9]\d)|(8[01-79]\d{2}))\s?\d{4}\s?\d{4}\s?\d{4}(\s?\d{3})?$')
    pat_id = re.compile(r'[1-9]\d{5}(19|20)\d{9}[0-9Xx]$')
    pat_email = re.compile(r'[a-zA-Z0-9_%+-]{1,}@[a-zA-Z0-9-]{1,}\.[a-zA-Z]{2,4}$')
    pat_name = re.compile(r'[\u738b\u674e\u5f20\u5218\u9648\u6768\u9ec4\u8d75\u5434\u5f90\u5b59\u6731\u9a6c\u80e1\u90ed\u6797\u4f55\u9ad8\u6881\u90d1\u7f57\u5b8b\u8c22\u5510\u97e9\u66f9\u8bb8\u9093\u8427\u51af\u66fe\u7a0b\u8521\u5f6d\u6f58\u8881\u4e8e\u8463\u4f59\u82cf\u53f6\u5415\u9b4f\u848b\u7530\u675c\u4e01\u6c88\u59dc\u8303\u5085\u949f\u5362\u6c6a\u6234\u5d14\u9646\u5ed6\u59da\u65b9\u91d1\u90b1\u4e18\u590f\u8c2d\u97e6\u8d3e\u90b9\u77f3\u718a\u5b5f\u79e6\u960e\u859b\u4faf\u96f7\u9f99\u6bb5\u90dd\u5b54\u90b5\u53f2\u6bdb\u4e07\u987e\u8d56\u5eb7\u8d3a\u4e25\u5c39\u94b1\u65bd\u725b\u6d2a\u9f9a\u6c64\u9676\u9ece\u6e29\u83ab\u6613\u6a0a\u4e54\u6bb7\u989c\u5e84\u7ae0\u9c81\u502a\u5e9e\u90a2\u4fde\u7fdf\u84dd\u8042\u9f50\u5411\u845b\u67f4\u4f0d\u8983\u9a86\u5173\u7126\u67f3\u6b27\u795d\u7eaa\u5c1a\u6bd5\u803f\u82a6\u5de6\u5b63\u7b26\u8f9b\u82d7\u8a79\u66f2\u6b27\u9633\u9773\u7941\u8def\u6d82\u5170\u88f4\u6885\u7ae5\u7fc1\u970d\u6e38\u962e\u5c24\u8212\u67ef\u725f\u6ed5\u8c37\u535c\u9976\u5b81\u51cc\u76db\u5355\u5189\u9c8d\u5305\u5c48\u623f\u55bb\u89e3\u84b2\u536b\u7b80\u65f6\u8fde\u9879\u95f5\u90ac\u5409\u9633\u53f8\u8d39\u8499\u5e2d\u664f\u968b\u53e4\u5f3a\u7a46\u59ec\u5bab\u666f\u7c73\u9ea6\u8c08\u67cf\u77bf\u827e\u6c99\u9122\u6842\u7aa6\u90c1\u7f2a\u7545\u5de9\u5353\u891a\u683e\u621a\u5a04\u7504\u90ce\u6c60\u4e1b\u8fb9\u5c91\u519c\u82df\u8fdf\u4fdd\u5546\u81e7\u4f58\u535e\u865e\u5201\u51b7\u5e94\u5321\u6817\u4ec7\u7ec3\u695a\u63ed\u5e08\u5b98\u4f5f\u5c01\u71d5\u6851\u5deb\u6556\u539f\u690d\u909d\u4ef2\u8346\u50a8\u5b97\u697c\u5e72\u82d1\u5bc7\u76d6\u5c60\u97a0\u8363\u4e95\u4e50\u94f6\u595a\u660e\u9ebb\u96cd\u82b1\u95fb\u51bc\u6728\u90dc\u5ec9\u8863\u853a\u548c\u5180\u5360\u95e8\u5e05\u5229\u6ee1][\u4e00-\u9fa5]{1,2}\d*$')
    pat_addr = re.compile(r'[\u53bf\u9547\u8def\u680b\u6751\u5e62\u8857]')
    
    [db_host, db_port, db_name, db_user, db_password] = db_connection

    try:
        conn = mysql.connector.connect(
            host=db_host,
            port=db_port,
            database=db_name,
            user=db_user,
            password=db_password
        )
        cursor = conn.cursor()

        cursor.execute("""
            SELECT
                table_name tn,
                CASE WHEN IFNULL(table_rows, 0) > %s THEN 'BIG' ELSE 'SMALL' END type,
                column_name cn,
                IFNULL(table_rows, 0) r
            FROM information_schema.columns
            LEFT JOIN (
                SELECT table_name, table_rows
                FROM information_schema.tables
                WHERE table_schema = %s
            ) t ON information_schema.columns.table_name = t.table_name
            WHERE table_schema = %s
            AND data_type LIKE '%%CHAR%%'
        """, (num_row, username, username))

        results = cursor.fetchall()
        records = []
        haterate_float = float(haterate) / 100.0

        for r in results:
            try:
                if r[1] == 'BIG':
                    sample = float(num_row) * 100.0 / float(r[3])
                    cursor.execute("""
                        SELECT TRIM(`{0}`)
                        FROM (
                            SELECT *
                            FROM (
                                SELECT `{0}`
                                FROM `{1}`.`{2}`
                                WHERE TRIM(`{0}`) IS NOT NULL AND TRIM(`{0}`) <> '0'
                                SAMPLE BLOCK (%s)
                            ) AS tmp
                        ) AS result
                        WHERE ROWNUM <= %s
                    """.format(r[2], username, r[0]), (sample, max_row))
                elif r[1] == 'SMALL':
                    cursor.execute("""
                        SELECT TRIM(`{0}`)
                        FROM `{1}`.`{2}`
                        WHERE TRIM(`{0}`) IS NOT NULL AND TRIM(`{0}`) <> '0'
                        LIMIT %s
                    """.format(r[2], username, r[0]), (max_row,))
                data = cursor.fetchall()
            except Exception as e:
                print(e)

            char_count = 0
            tel_count = 0
            account_count = 0
            id_count = 0
            email_count = 0
            name_count = 0
            addr_count = 0
            total_count = len(data)
            sample = ''
            sample2 = []

            if data:
                for d in data:
                    if pat_account.match(d[0]):
                        account_count += 1
                    if pat_tel.match(d[0]):
                        tel_count += 1
                    if pat_id.match(d[0]):
                        id_count += 1
                    if pat_email.match(d[0]):
                        email_count += 1
                    try:
                        if pat_name.match(d[0]):
                            name_count += 1
                    except Exception:
                        if pat_name.match(d[0].encode('gbk', 'ignore').decode('gbk')):
                            name_count += 1
                    try:
                        if pat_addr.search(d[0].encode('gbk', 'ignore').decode('gbk')):
                            addr_count += 1
                    except Exception:
                        if pat_addr.search(d[0]):
                            addr_count += 1

                sample1 = data[:result_threshold]
                for d in sample1:
                    sample2.append(d[0])
                sample = '\n'.join(sample2)

                if char_count == 0:
                    if (float(account_count) / float(total_count)) > haterate_float:
                        records.append(r + ('ACCOUNT', round((float(account_count) / float(total_count)), 2), sample))
                    if (float(tel_count) / float(total_count)) > haterate_float:
                        records.append(r + ('TEL', round((float(tel_count) / float(total_count)), 2), sample))
                    if (float(id_count) / float(total_count)) > haterate_float:
                        records.append(r + ('ID', round((float(id_count) / float(total_count)), 2), sample))
                    if (float(email_count) / float(total_count)) > haterate_float:
                        records.append(r + ('EMAIL', round((float(email_count) / float(total_count)), 2), sample))
                    if (float(name_count) / float(total_count)) > haterate_float:
                        records.append(r + ('NAME', round((float(name_count) / float(total_count)), 2), sample))
                    if (float(addr_count) / float(total_count)) > haterate_float:
                        records.append(r + ('ADDRESS', round((float(addr_count) / float(total_count)), 2), sample))

        return {"1_user": username, "2_records": records, "3_sum": len(records)}

    except Exception as e:
        print(e)
    finally:
        cursor.close()
        conn.close()

def encrypt_sensitive_data(db_connection, username, table_name, column_name):
    [db_host, db_port, db_name, db_user, db_password] = db_connection

    try:
        conn = mysql.connector.connect(
            host=db_host,
            port=db_port,
            database=db_name,
            user=db_user,
            password=db_password
        )
        cursor = conn.cursor()

        cursor.execute("""
            SELECT `{0}`
            FROM `{1}`.`{2}`
            WHERE TRIM(`{0}`) IS NOT NULL AND TRIM(`{0}`) <> '0'
        """.format(column_name, username, table_name))

        data = cursor.fetchall()
        encrypted_data = []

        for d in data:
            encrypted_value = base64.b64encode(d[0].encode()).decode()
            encrypted_data.append(encrypted_value)

        cursor.close()

        cursor = conn.cursor()

        for i, encrypted_value in enumerate(encrypted_data):
            cursor.execute("""
                UPDATE `{0}`.`{1}`
                SET `{2}` = %s
                WHERE `{2}` = %s
            """.format(username, table_name, column_name), (encrypted_value, data[i][0]))

        conn.commit()
        cursor.close()
        conn.close()
        print("Encryption complete.")

    except Exception as e:
        print(e)
    finally:
        cursor.close()
        conn.close()

# 使用示例
db_connection = ['your_db_host', 'your_db_port', 'your_db_name', 'your_db_user', 'your_db_password']
username = 'your_database_username'
num_row = 100
max_row = 500
haterate = 10
result_threshold = 5
table_check = ''
view_check = ''

result = f_sensitive_info(db_connection, username, num_row, max_row, haterate, result_threshold, table_check, view_check)

# 对检测到的敏感信息进行加密
for record in result['2_records']:
    table_name = record[0]
    column_name = record[2]
    encrypt_sensitive_data(db_connection, username, table_name, column_name)
